#!/usr/bin/env python3

import sys
from PIL import Image

"""
The following are options that can be set by the user to customize the functionality of the create_new_img_mask function.
All option functions should be added to the options dictionary inside set_options, in order to be accessible by users.
"""
# Show a preview of the new image at the end.
SHOW = False
def show():
    global SHOW
    SHOW = True

"""
set_options: Parse list user inputed arguments and call option functions with appropriate arguments.
Params( args[list]: A list of strings representing user input )
Returns()
"""
def set_options(args):
    options = {
        '-s': (show, False),
    }
    func = None
    get_value = False
    for a in args:
        if not get_value and a.lower() in options:
            func, has_args = options[a.lower()]
            get_value = has_args
            if not get_value:
                func()
                func = None
        elif get_value:
            get_value = False
            if func != None:
                func(a)
                func = None
        else:
            print(f'Invalid option: {a}')
    return

"""
rgb: Convert a Hexcode string to a tuple of red green and blue integer values.
Params( value[str]: Hexcode that starts with `#` followed by 3 or 6 valid hexidecimal characters )
Retruns( tuple(int, int, int) or None )
"""
def rgb(value):
    r = None
    if len(value) != 7 and len(value) != 4:
        print(f'Invalid Hexcode! -> {value}')
        print('    Make sure your hexcode has a # symbol followed by 3 or 6 characters 0-9 and A-F.')
    else:
        value = value.lstrip('#')
        lv = len(value)
        if lv == 3:
            value *= 2
            lv *= 2
        r = tuple(int(value[i:i + lv // 3], 16) for i in range(0, lv, lv // 3))
    return r

"""
create_new_img_mask: Create an image file based on an input where all non transparent pixels are set to a color.
Params(
    input_path[str]: Relative path to an image file that should be modified,
    output_path[str]: Relative path to where the output image should be saved,
    color:[tuple]: A tuple of 3 int between 0 and 255 inclusive or None
    )
Returns( Image or None )
"""
def create_new_img_mask(input_path, output_path, color):
    global SHOW
    out = None
    if color != None:
        r, g, b = color
        im = Image.open(input_path, 'r')
        out = Image.new('RGBA', im.size, (0, 0, 0, 0))

        width, height = im.size
        for x in range(width):
                for y in range(height):
                    p = im.getpixel((x,y))
                    if type(p) is int:
                        if p != 0:
                            out.putpixel((x,y), (r, g, b, 255))
                    elif type(p) is tuple:
                        if len(p) == 4:
                            if p[3] != 0:
                                out.putpixel((x,y), (r, g, b, p[3]))
                        else:
                            if p[1] != 0:
                                out.putpixel((x,y), (r, g, b, p[1]))
        out.save(output_path, "PNG")
        if SHOW:
            out.show()
    return out

"""
main: Parse sys args and pass values to create_new_img_mask.
Params()
Returns()
"""
def main():
    if len(sys.argv) < 4:
        print("Expected 3 arguments...")
        print("Try again and add")
        print("    ./PATH_TO_INPUT_FILE ./PATH_TO_OUTPUT_FILE '#HEXCODE'")
    else:
        input_path = str(sys.argv[1])
        output_path = str(sys.argv[2])
        color = rgb(sys.argv[3])
        set_options(sys.argv[4:])
        create_new_img_mask(input_path, output_path, color)
    return


if __name__ == '__main__':
    main()

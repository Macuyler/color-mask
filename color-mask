#!/usr/bin/env python3

import sys
from PIL import Image

USAGE = """
# Usage

> Replace non-transparent pixels with an inputed color.
 ./color-mask ./PATH_TO_INPUT_FILE ./PATH_FOR_OUTPUT '#HEXCODE' [OPTIONS]
    (The Input file should be a PNG image)

    * OPTIONS:
      -s            : Show a preview of the new Image at the end.
      -r '#HEXCODE' : Replace only pixels matching the following HEXCODE.
      -rd '#HEXCODE' : Replace pixels darker than the following HEXCODE.
      -rl '#HEXCODE' : Replace pixels lighter than the following HEXCODE.


> List all colors contained in an image.
 ./color-mask colors ./PATH_TO_IMAGE_FILE
    (The Image file should be a PNG image)
"""

"""
The following are options that can be set by the user to customize the functionality of the create_new_img_mask function.
All option functions should be added to the options dictionary inside set_options, in order to be accessible by users.
"""
# Replace only pixels that match a specfic color.
REPLACE = None
def replace(h):
    global REPLACE
    REPLACE = hex_rgba(h)


# Show a preview of the new image at the end.
SHOW = False
def show():
    global SHOW
    SHOW = True


# Replace all values below the Replace color.
BELOW = False
def rep_below(h):
    global BELOW
    BELOW = True
    replace(h)


# Replace all values above the Replace color.
ABOVE = False
def rep_above(h):
    global ABOVE
    ABOVE = True
    replace(h)


"""
set_options: Parse list user inputed arguments and call option functions with appropriate arguments.
Params( args[list]: A list of strings representing user input )
Returns()
"""
def set_options(args):
    options = {
        '-r': (replace, True),
        '-rd': (rep_below, True),
        '-rl': (rep_above, True),
        '-s': (show, False),
    }
    func = None
    get_value = False
    for a in args:
        if not get_value and a.lower() in options:
            func, has_args = options[a.lower()]
            get_value = has_args
            if not get_value:
                func()
                func = None
        elif get_value:
            get_value = False
            if func is not None:
                func(a)
                func = None
        else:
            print(f'Invalid option: {a}')
    return


"""
hex_rgba: Convert a Hexcode string to an rgba value.
Params( value[str]: Hexcode that starts with `#` followed by 3, 6 or 8 valid hexidecimal characters )
Returns( tuple(int, int, int, int) or None )
"""
def hex_rgba(value):
    r = None
    lv = len(value)
    if '#' not in value or (lv != 9 and lv != 7 and lv != 4):
        print(f'Invalid Hexcode! -> {value}')
        print('    Make sure your hexcode has a # symbol followed by 3, 6 or 8 characters 0-9 and A-F.')
    else:
        value = value.lstrip('#')
        lv = len(value)
        if lv == 3:
            value *= 2
            lv *= 2
        if lv == 6:
            value += 'FF'
            lv += 2
        r = tuple(int(value[i:i + lv // 4], 16) for i in range(0, lv, lv // 4))
    return r


"""
pixel_rgba: Convert an Image pixel to an rgba value.
Params( pixel[int or tuple]: A pixel from a Pillow Image )
Returns( tuple(int, int, int, int) )
"""
def pixel_rgba(pixel):
    r, g, b, a = (0, 0, 0, 0)
    if type(pixel) is int:
        r = pixel
        g = pixel
        b = pixel
        a = 255
    elif type(pixel) is tuple:
        if len(pixel) == 4:
            r, g, b, a = pixel
        else:
            r = pixel[0]
            g = pixel[0]
            b = pixel[0]
            a = pixel[1]
    return (r, g, b, a)


"""
create_new_img_mask: Create an image file based on an input where all non transparent pixels are set to a color.
Params(
    input_path[str]: Relative path to an image file that should be modified,
    output_path[str]: Relative path to where the output image should be saved,
    new_color:[tuple]: A tuple of 3 int between 0 and 255 inclusive or None
    )
Returns( Image or None )
"""
def create_new_img_mask(input_path, output_path, new_color):
    global REPLACE, SHOW, BELOW, ABOVE
    out = None
    if new_color is not None:
        im = Image.open(input_path, 'r')
        out = Image.new('RGBA', im.size, (0, 0, 0, 0))
        width, height = im.size
        # Loop through and edit all pixels
        for x in range(width):
            for y in range(height):
                set_r, set_g, set_b, set_a = pixel_rgba(im.getpixel((x, y)))
                if REPLACE is not None:
                    rep_r, rep_g, rep_b, rep_a = REPLACE
                    rep_max = max(rep_r, rep_g, rep_b)
                    set_max = max(set_r, set_g, set_b)
                    down = BELOW and set_max <= rep_max
                    up = ABOVE and set_max >= rep_max
                    at = rep_r == set_r and rep_g == set_g and rep_b == set_b and rep_a == set_a
                    if down or up or at:
                        set_r, set_g, set_b, set_a = new_color
                elif set_a != 0:
                    set_r, set_g, set_b, set_a = new_color
                out.putpixel((x, y), (set_r, set_g, set_b, set_a))
        out.save(output_path, "PNG")
        if SHOW:
            out.show()
    return out

"""
get_colors: List all unique colors codes found in an image.
Params(
    image_path[str]: Relative path to an image file,
    silent[bool]: Default False | Set to True to block print statements
    )
Returns( List[Tuple] )
"""
def get_colors(image_path, silent=False):
    im = Image.open(image_path, 'r')
    width, height = im.size
    colors = []
    for x in range(width):
        for y in range(height):
            c = pixel_rgba(im.getpixel((x, y)))
            if not c in colors:
                colors.append(c)
    if not silent:
        for c in colors:
            print(' - ', c)
    return colors


"""
main: Parse sys args and pass values to create_new_img_mask.
Params()
Returns()
"""
def main():
    if len(sys.argv) == 3 and sys.argv[1] == 'colors':
        get_colors(sys.argv[2])
    elif len(sys.argv) < 4:
        print(USAGE)
    else:
        input_path = str(sys.argv[1])
        output_path = str(sys.argv[2])
        new_color = hex_rgba(sys.argv[3])
        set_options(sys.argv[4:])
        create_new_img_mask(input_path, output_path, new_color)
    return


if __name__ == '__main__':
    main()
